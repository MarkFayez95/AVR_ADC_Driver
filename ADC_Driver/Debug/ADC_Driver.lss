
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114b  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  000018cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f9  00000000  00000000  0000212f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f0  00000000  00000000  00002d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000972  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  64:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	#if ADC_VOLTAGE_REFERENCE == ADC_VREF_AVCC
		SetBit(ADMUX,6);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
		ClearBit(ADMUX,7);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7
	#endif
	
	#if ADC_ADJUST == ADC_RIGHT_ADJUST
		ClearBit(ADMUX,5);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
	#endif
	
	#if ADC_CHANNEL == ADC_CHANNEL_1
		SetBit(ADMUX,0);
  7e:	87 b1       	in	r24, 0x07	; 7
  80:	81 60       	ori	r24, 0x01	; 1
  82:	87 b9       	out	0x07, r24	; 7
	#endif
	
	#if ADC_CONVERSION_TRIGGER == ADC_AUTO_TRIGGER
		SetBit(ADCSRA,5);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	80 62       	ori	r24, 0x20	; 32
  88:	86 b9       	out	0x06, r24	; 6
	#endif
	
	#if ADC_PRESCALAR == ADC_PRESC_128
		SetBit(ADCSRA,0);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	86 b9       	out	0x06, r24	; 6
		SetBit(ADCSRA,1);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	82 60       	ori	r24, 0x02	; 2
  94:	86 b9       	out	0x06, r24	; 6
		SetBit(ADCSRA,2);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	86 b9       	out	0x06, r24	; 6
	#endif
	
	#if ADC_INTERRUPT_STATUS == ADC_INTERRUPT_DISABLE
		ClearBit(ADCSRA,3);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	86 b9       	out	0x06, r24	; 6
	#endif
	
	/*** Enable ADC ***/
	SetBit(ADCSRA,7);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	86 b9       	out	0x06, r24	; 6
  a8:	08 95       	ret

000000aa <ADC_Read>:
	
}
void ADC_Read(uint16* value)
{
  aa:	fc 01       	movw	r30, r24

	SetBit(ADCSRA,6); // start conversion //
  ac:	96 b1       	in	r25, 0x06	; 6
  ae:	90 64       	ori	r25, 0x40	; 64
  b0:	96 b9       	out	0x06, r25	; 6
	
	while (GetBit(ADCSRA,4) == 0); // wait till end of conversion //
  b2:	34 9b       	sbis	0x06, 4	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <ADC_Read+0x8>
	
	*value = ADC_VAL;
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = Value;
		break;
		
		case DIO_PORTD:
		PORTD = Value;
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	b9 f5       	brne	.+110    	; 0x132 <DIO_SetPinDir+0x72>
  c4:	84 31       	cpi	r24, 0x14	; 20
  c6:	a1 f0       	breq	.+40     	; 0xf0 <DIO_SetPinDir+0x30>
  c8:	18 f4       	brcc	.+6      	; 0xd0 <DIO_SetPinDir+0x10>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	31 f0       	breq	.+12     	; 0xda <DIO_SetPinDir+0x1a>
  ce:	08 95       	ret
  d0:	8e 31       	cpi	r24, 0x1E	; 30
  d2:	c9 f0       	breq	.+50     	; 0x106 <DIO_SetPinDir+0x46>
  d4:	88 32       	cpi	r24, 0x28	; 40
  d6:	11 f1       	breq	.+68     	; 0x11c <DIO_SetPinDir+0x5c>
  d8:	08 95       	ret
  da:	2a b3       	in	r18, 0x1a	; 26
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_SetPinDir+0x26>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_SetPinDir+0x22>
  ea:	82 2b       	or	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	08 95       	ret
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPinDir+0x3c>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPinDir+0x38>
 100:	82 2b       	or	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
 104:	08 95       	ret
 106:	24 b3       	in	r18, 0x14	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0x52>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0x4e>
 116:	82 2b       	or	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
 11a:	08 95       	ret
 11c:	21 b3       	in	r18, 0x11	; 17
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0x68>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0x64>
 12c:	82 2b       	or	r24, r18
 12e:	81 bb       	out	0x11, r24	; 17
 130:	08 95       	ret
 132:	41 11       	cpse	r20, r1
 134:	3a c0       	rjmp	.+116    	; 0x1aa <DIO_SetPinDir+0xea>
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	a9 f0       	breq	.+42     	; 0x164 <DIO_SetPinDir+0xa4>
 13a:	18 f4       	brcc	.+6      	; 0x142 <DIO_SetPinDir+0x82>
 13c:	8a 30       	cpi	r24, 0x0A	; 10
 13e:	31 f0       	breq	.+12     	; 0x14c <DIO_SetPinDir+0x8c>
 140:	08 95       	ret
 142:	8e 31       	cpi	r24, 0x1E	; 30
 144:	d9 f0       	breq	.+54     	; 0x17c <DIO_SetPinDir+0xbc>
 146:	88 32       	cpi	r24, 0x28	; 40
 148:	29 f1       	breq	.+74     	; 0x194 <DIO_SetPinDir+0xd4>
 14a:	08 95       	ret
 14c:	2a b3       	in	r18, 0x1a	; 26
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0x98>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0x94>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	8a bb       	out	0x1a, r24	; 26
 162:	08 95       	ret
 164:	27 b3       	in	r18, 0x17	; 23
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_SetPinDir+0xb0>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_SetPinDir+0xac>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	87 bb       	out	0x17, r24	; 23
 17a:	08 95       	ret
 17c:	24 b3       	in	r18, 0x14	; 20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_SetPinDir+0xc8>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_SetPinDir+0xc4>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
 192:	08 95       	ret
 194:	21 b3       	in	r18, 0x11	; 17
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDir+0xe0>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDir+0xdc>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	08 95       	ret

000001ac <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
	if(Value == DIO_PIN_HIGH )
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	b9 f5       	brne	.+110    	; 0x21e <DIO_SetPinValue+0x72>
	{
		switch (Port)
 1b0:	84 31       	cpi	r24, 0x14	; 20
 1b2:	a1 f0       	breq	.+40     	; 0x1dc <DIO_SetPinValue+0x30>
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <DIO_SetPinValue+0x10>
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <DIO_SetPinValue+0x1a>
 1ba:	08 95       	ret
 1bc:	8e 31       	cpi	r24, 0x1E	; 30
 1be:	c9 f0       	breq	.+50     	; 0x1f2 <DIO_SetPinValue+0x46>
 1c0:	88 32       	cpi	r24, 0x28	; 40
 1c2:	11 f1       	breq	.+68     	; 0x208 <DIO_SetPinValue+0x5c>
 1c4:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA , Pin);
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinValue+0x26>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinValue+0x22>
 1d6:	82 2b       	or	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
			break;
 1da:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(PORTB , Pin);
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinValue+0x3c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinValue+0x38>
 1ec:	82 2b       	or	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
			break;
 1f0:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(PORTC , Pin);
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinValue+0x52>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinValue+0x4e>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
			break;
 206:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(PORTD , Pin);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinValue+0x68>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinValue+0x64>
 218:	82 2b       	or	r24, r18
 21a:	82 bb       	out	0x12, r24	; 18
			break;
 21c:	08 95       	ret
			
			default:
			break;
		}
	}
	else if(Value == DIO_PIN_LOW)
 21e:	41 11       	cpse	r20, r1
 220:	3a c0       	rjmp	.+116    	; 0x296 <DIO_SetPinValue+0xea>
	{
		switch (Port)
 222:	84 31       	cpi	r24, 0x14	; 20
 224:	a9 f0       	breq	.+42     	; 0x250 <DIO_SetPinValue+0xa4>
 226:	18 f4       	brcc	.+6      	; 0x22e <DIO_SetPinValue+0x82>
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	31 f0       	breq	.+12     	; 0x238 <DIO_SetPinValue+0x8c>
 22c:	08 95       	ret
 22e:	8e 31       	cpi	r24, 0x1E	; 30
 230:	d9 f0       	breq	.+54     	; 0x268 <DIO_SetPinValue+0xbc>
 232:	88 32       	cpi	r24, 0x28	; 40
 234:	29 f1       	breq	.+74     	; 0x280 <DIO_SetPinValue+0xd4>
 236:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA , Pin);
 238:	2b b3       	in	r18, 0x1b	; 27
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPinValue+0x98>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPinValue+0x94>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	8b bb       	out	0x1b, r24	; 27
			break;
 24e:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB , Pin);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinValue+0xb0>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinValue+0xac>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	88 bb       	out	0x18, r24	; 24
			break;
 266:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC , Pin);
 268:	25 b3       	in	r18, 0x15	; 21
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinValue+0xc8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinValue+0xc4>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	85 bb       	out	0x15, r24	; 21
			break;
 27e:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD , Pin);
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinValue+0xe0>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinValue+0xdc>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret

00000298 <LCD_WriteCommand>:
{
	uint8 rows[2] = {0x80,0xc0};
	
	LCD_WriteCommand(rows[row]+col);
	
}
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	84 e1       	ldi	r24, 0x14	; 20
 2a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	84 e1       	ldi	r24, 0x14	; 20
 2ac:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	84 e1       	ldi	r24, 0x14	; 20
 2b6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 2ba:	8b b3       	in	r24, 0x1b	; 27
 2bc:	9c 2f       	mov	r25, r28
 2be:	90 7f       	andi	r25, 0xF0	; 240
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	89 2b       	or	r24, r25
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	84 e1       	ldi	r24, 0x14	; 20
 2cc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_WriteCommand+0x3c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_WriteCommand+0x42>
 2da:	00 00       	nop
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	84 e1       	ldi	r24, 0x14	; 20
 2e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 2e6:	20 e1       	ldi	r18, 0x10	; 16
 2e8:	c2 9f       	mul	r28, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	9b b3       	in	r25, 0x1b	; 27
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	89 2b       	or	r24, r25
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	63 e0       	ldi	r22, 0x03	; 3
 2fa:	84 e1       	ldi	r24, 0x14	; 20
 2fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_WriteCommand+0x6c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_WriteCommand+0x72>
 30a:	00 00       	nop
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	84 e1       	ldi	r24, 0x14	; 20
 312:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 316:	8f e1       	ldi	r24, 0x1F	; 31
 318:	9e e4       	ldi	r25, 0x4E	; 78
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_WriteCommand+0x82>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_WriteCommand+0x88>
 320:	00 00       	nop
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCD_Init>:
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	84 e1       	ldi	r24, 0x14	; 20
 32c:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	84 e1       	ldi	r24, 0x14	; 20
 336:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	84 e1       	ldi	r24, 0x14	; 20
 340:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	65 e0       	ldi	r22, 0x05	; 5
 352:	8a e0       	ldi	r24, 0x0A	; 10
 354:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	66 e0       	ldi	r22, 0x06	; 6
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	67 e0       	ldi	r22, 0x07	; 7
 366:	8a e0       	ldi	r24, 0x0A	; 10
 368:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDir>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	81 ee       	ldi	r24, 0xE1	; 225
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <LCD_Init+0x4c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Init+0x56>
 37c:	00 00       	nop
 37e:	83 e3       	ldi	r24, 0x33	; 51
 380:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 384:	82 e3       	ldi	r24, 0x32	; 50
 386:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 390:	8c e0       	ldi	r24, 0x0C	; 12
 392:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 3a8:	08 95       	ret

000003aa <LCD_WriteChar>:
 3aa:	cf 93       	push	r28
 3ac:	c8 2f       	mov	r28, r24
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	84 e1       	ldi	r24, 0x14	; 20
 3b4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	84 e1       	ldi	r24, 0x14	; 20
 3be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	84 e1       	ldi	r24, 0x14	; 20
 3c8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 3cc:	8b b3       	in	r24, 0x1b	; 27
 3ce:	9c 2f       	mov	r25, r28
 3d0:	90 7f       	andi	r25, 0xF0	; 240
 3d2:	8f 70       	andi	r24, 0x0F	; 15
 3d4:	89 2b       	or	r24, r25
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	63 e0       	ldi	r22, 0x03	; 3
 3dc:	84 e1       	ldi	r24, 0x14	; 20
 3de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_WriteChar+0x3c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_WriteChar+0x42>
 3ec:	00 00       	nop
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	84 e1       	ldi	r24, 0x14	; 20
 3f4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 3f8:	20 e1       	ldi	r18, 0x10	; 16
 3fa:	c2 9f       	mul	r28, r18
 3fc:	c0 01       	movw	r24, r0
 3fe:	11 24       	eor	r1, r1
 400:	9b b3       	in	r25, 0x1b	; 27
 402:	9f 70       	andi	r25, 0x0F	; 15
 404:	89 2b       	or	r24, r25
 406:	8b bb       	out	0x1b, r24	; 27
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	84 e1       	ldi	r24, 0x14	; 20
 40e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 412:	8f e9       	ldi	r24, 0x9F	; 159
 414:	9f e0       	ldi	r25, 0x0F	; 15
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	84 e1       	ldi	r24, 0x14	; 20
 424:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinValue>
 428:	8f e1       	ldi	r24, 0x1F	; 31
 42a:	9e e4       	ldi	r25, 0x4E	; 78
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <LCD_WriteInteger>:
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	2a 97       	sbiw	r28, 0x0a	; 10
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	6b 01       	movw	r12, r22
 458:	7c 01       	movw	r14, r24
 45a:	99 23       	and	r25, r25
 45c:	5c f4       	brge	.+22     	; 0x474 <LCD_WriteInteger+0x3c>
 45e:	8d e2       	ldi	r24, 0x2D	; 45
 460:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_WriteChar>
 464:	f0 94       	com	r15
 466:	e0 94       	com	r14
 468:	d0 94       	com	r13
 46a:	c0 94       	com	r12
 46c:	c1 1c       	adc	r12, r1
 46e:	d1 1c       	adc	r13, r1
 470:	e1 1c       	adc	r14, r1
 472:	f1 1c       	adc	r15, r1
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	17 c0       	rjmp	.+46     	; 0x4a6 <LCD_WriteInteger+0x6e>
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	2a e0       	ldi	r18, 0x0A	; 10
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	0e 94 9d 02 	call	0x53a	; 0x53a <__divmodsi4>
 488:	e1 e0       	ldi	r30, 0x01	; 1
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ec 0f       	add	r30, r28
 48e:	fd 1f       	adc	r31, r29
 490:	e1 0f       	add	r30, r17
 492:	f1 1d       	adc	r31, r1
 494:	17 fd       	sbrc	r17, 7
 496:	fa 95       	dec	r31
 498:	60 5d       	subi	r22, 0xD0	; 208
 49a:	60 83       	st	Z, r22
 49c:	c2 2e       	mov	r12, r18
 49e:	d3 2e       	mov	r13, r19
 4a0:	e4 2e       	mov	r14, r20
 4a2:	f5 2e       	mov	r15, r21
 4a4:	1f 5f       	subi	r17, 0xFF	; 255
 4a6:	1c 14       	cp	r1, r12
 4a8:	1d 04       	cpc	r1, r13
 4aa:	1e 04       	cpc	r1, r14
 4ac:	1f 04       	cpc	r1, r15
 4ae:	14 f4       	brge	.+4      	; 0x4b4 <LCD_WriteInteger+0x7c>
 4b0:	1a 30       	cpi	r17, 0x0A	; 10
 4b2:	14 f3       	brlt	.-60     	; 0x478 <LCD_WriteInteger+0x40>
 4b4:	11 50       	subi	r17, 0x01	; 1
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <LCD_WriteInteger+0x98>
 4b8:	e1 e0       	ldi	r30, 0x01	; 1
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ec 0f       	add	r30, r28
 4be:	fd 1f       	adc	r31, r29
 4c0:	e1 0f       	add	r30, r17
 4c2:	f1 1d       	adc	r31, r1
 4c4:	17 fd       	sbrc	r17, 7
 4c6:	fa 95       	dec	r31
 4c8:	80 81       	ld	r24, Z
 4ca:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_WriteChar>
 4ce:	11 50       	subi	r17, 0x01	; 1
 4d0:	11 23       	and	r17, r17
 4d2:	94 f7       	brge	.-28     	; 0x4b8 <LCD_WriteInteger+0x80>
 4d4:	2a 96       	adiw	r28, 0x0a	; 10
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	08 95       	ret

000004f0 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(0x01);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_WriteCommand>
 4f6:	08 95       	ret

000004f8 <main>:

#include "Temp_Sensor.h"
#include "LCD.h"

int main(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <main+0x6>
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	
	uint16 Temp = 0;
 502:	1a 82       	std	Y+2, r1	; 0x02
 504:	19 82       	std	Y+1, r1	; 0x01
	//TempSensor_Init();
	ADC_Init();
 506:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
	LCD_Init();
 50a:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		//TempSensor_Read(&Temp);
		ADC_Read(&Temp);
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Read>
		
		LCD_Clear();
 516:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_Clear>
		LCD_WriteInteger(Temp);
 51a:	69 81       	ldd	r22, Y+1	; 0x01
 51c:	7a 81       	ldd	r23, Y+2	; 0x02
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_WriteInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	83 ec       	ldi	r24, 0xC3	; 195
 52a:	99 e0       	ldi	r25, 0x09	; 9
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <main+0x34>
 534:	00 c0       	rjmp	.+0      	; 0x536 <main+0x3e>
 536:	00 00       	nop
 538:	ea cf       	rjmp	.-44     	; 0x50e <main+0x16>

0000053a <__divmodsi4>:
 53a:	05 2e       	mov	r0, r21
 53c:	97 fb       	bst	r25, 7
 53e:	1e f4       	brtc	.+6      	; 0x546 <__divmodsi4+0xc>
 540:	00 94       	com	r0
 542:	0e 94 b4 02 	call	0x568	; 0x568 <__negsi2>
 546:	57 fd       	sbrc	r21, 7
 548:	07 d0       	rcall	.+14     	; 0x558 <__divmodsi4_neg2>
 54a:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodsi4>
 54e:	07 fc       	sbrc	r0, 7
 550:	03 d0       	rcall	.+6      	; 0x558 <__divmodsi4_neg2>
 552:	4e f4       	brtc	.+18     	; 0x566 <__divmodsi4_exit>
 554:	0c 94 b4 02 	jmp	0x568	; 0x568 <__negsi2>

00000558 <__divmodsi4_neg2>:
 558:	50 95       	com	r21
 55a:	40 95       	com	r20
 55c:	30 95       	com	r19
 55e:	21 95       	neg	r18
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	4f 4f       	sbci	r20, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255

00000566 <__divmodsi4_exit>:
 566:	08 95       	ret

00000568 <__negsi2>:
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__udivmodsi4>:
 578:	a1 e2       	ldi	r26, 0x21	; 33
 57a:	1a 2e       	mov	r1, r26
 57c:	aa 1b       	sub	r26, r26
 57e:	bb 1b       	sub	r27, r27
 580:	fd 01       	movw	r30, r26
 582:	0d c0       	rjmp	.+26     	; 0x59e <__udivmodsi4_ep>

00000584 <__udivmodsi4_loop>:
 584:	aa 1f       	adc	r26, r26
 586:	bb 1f       	adc	r27, r27
 588:	ee 1f       	adc	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	a2 17       	cp	r26, r18
 58e:	b3 07       	cpc	r27, r19
 590:	e4 07       	cpc	r30, r20
 592:	f5 07       	cpc	r31, r21
 594:	20 f0       	brcs	.+8      	; 0x59e <__udivmodsi4_ep>
 596:	a2 1b       	sub	r26, r18
 598:	b3 0b       	sbc	r27, r19
 59a:	e4 0b       	sbc	r30, r20
 59c:	f5 0b       	sbc	r31, r21

0000059e <__udivmodsi4_ep>:
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	1a 94       	dec	r1
 5a8:	69 f7       	brne	.-38     	; 0x584 <__udivmodsi4_loop>
 5aa:	60 95       	com	r22
 5ac:	70 95       	com	r23
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	9b 01       	movw	r18, r22
 5b4:	ac 01       	movw	r20, r24
 5b6:	bd 01       	movw	r22, r26
 5b8:	cf 01       	movw	r24, r30
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
