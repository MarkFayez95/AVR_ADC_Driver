
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000007d0  00000864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000160e  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a68  00000000  00000000  00002076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1a  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000037f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce9  00000000  00000000  000040eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <main>
  8a:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
		SetBit(ADCSRA,ADSC); // start conversion //
		
		while (GetBit(ADCSRA,ADIF) == 0); // wait till end of conversion //
		
		#if ADC_ADJUST == ADC_RIGHT_ADJUST
			*value = ADC_VAL;
  92:	87 b1       	in	r24, 0x07	; 7
  94:	8f 73       	andi	r24, 0x3F	; 63
  96:	87 b9       	out	0x07, r24	; 7
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	86 b9       	out	0x06, r24	; 6
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	86 b9       	out	0x06, r24	; 6
  c0:	80 b7       	in	r24, 0x30	; 48
  c2:	8f 71       	andi	r24, 0x1F	; 31
  c4:	80 bf       	out	0x30, r24	; 48
  c6:	80 b7       	in	r24, 0x30	; 48
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 bf       	out	0x30, r24	; 48
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	8f b7       	in	r24, 0x3f	; 63
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8f bf       	out	0x3f, r24	; 63
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	86 b9       	out	0x06, r24	; 6
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	86 b9       	out	0x06, r24	; 6
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	9c e9       	ldi	r25, 0x9C	; 156
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <ADC_Init+0x56>
  ec:	00 c0       	rjmp	.+0      	; 0xee <ADC_Init+0x5c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <ADC_INT_Read>:

void ADC_INT_Read(uint16* value)
{
	// read current converted value
	#if ADC_ADJUST == ADC_RIGHT_ADJUST
		*value = ADC_VAL;
  f2:	24 b1       	in	r18, 0x04	; 4
  f4:	35 b1       	in	r19, 0x05	; 5
  f6:	fc 01       	movw	r30, r24
  f8:	31 83       	std	Z+1, r19	; 0x01
  fa:	20 83       	st	Z, r18
  fc:	08 95       	ret

000000fe <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = Value;
		break;
		
		case DIO_PORTD:
		PORTD = Value;
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	b9 f5       	brne	.+110    	; 0x170 <DIO_SetPinDir+0x72>
 102:	84 31       	cpi	r24, 0x14	; 20
 104:	a1 f0       	breq	.+40     	; 0x12e <DIO_SetPinDir+0x30>
 106:	18 f4       	brcc	.+6      	; 0x10e <DIO_SetPinDir+0x10>
 108:	8a 30       	cpi	r24, 0x0A	; 10
 10a:	31 f0       	breq	.+12     	; 0x118 <DIO_SetPinDir+0x1a>
 10c:	08 95       	ret
 10e:	8e 31       	cpi	r24, 0x1E	; 30
 110:	c9 f0       	breq	.+50     	; 0x144 <DIO_SetPinDir+0x46>
 112:	88 32       	cpi	r24, 0x28	; 40
 114:	11 f1       	breq	.+68     	; 0x15a <DIO_SetPinDir+0x5c>
 116:	08 95       	ret
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0x26>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x22>
 128:	82 2b       	or	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	08 95       	ret
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0x3c>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0x38>
 13e:	82 2b       	or	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0x52>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0x4e>
 154:	82 2b       	or	r24, r18
 156:	84 bb       	out	0x14, r24	; 20
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPinDir+0x68>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPinDir+0x64>
 16a:	82 2b       	or	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret
 170:	41 11       	cpse	r20, r1
 172:	3a c0       	rjmp	.+116    	; 0x1e8 <DIO_SetPinDir+0xea>
 174:	84 31       	cpi	r24, 0x14	; 20
 176:	a9 f0       	breq	.+42     	; 0x1a2 <DIO_SetPinDir+0xa4>
 178:	18 f4       	brcc	.+6      	; 0x180 <DIO_SetPinDir+0x82>
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	31 f0       	breq	.+12     	; 0x18a <DIO_SetPinDir+0x8c>
 17e:	08 95       	ret
 180:	8e 31       	cpi	r24, 0x1E	; 30
 182:	d9 f0       	breq	.+54     	; 0x1ba <DIO_SetPinDir+0xbc>
 184:	88 32       	cpi	r24, 0x28	; 40
 186:	29 f1       	breq	.+74     	; 0x1d2 <DIO_SetPinDir+0xd4>
 188:	08 95       	ret
 18a:	2a b3       	in	r18, 0x1a	; 26
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_SetPinDir+0x98>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_SetPinDir+0x94>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	08 95       	ret
 1a2:	27 b3       	in	r18, 0x17	; 23
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPinDir+0xb0>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPinDir+0xac>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	08 95       	ret
 1ba:	24 b3       	in	r18, 0x14	; 20
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinDir+0xc8>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinDir+0xc4>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	84 bb       	out	0x14, r24	; 20
 1d0:	08 95       	ret
 1d2:	21 b3       	in	r18, 0x11	; 17
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDir+0xe0>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDir+0xdc>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	81 bb       	out	0x11, r24	; 17
 1e8:	08 95       	ret

000001ea <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
	if(Value == DIO_PIN_HIGH )
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	b9 f5       	brne	.+110    	; 0x25c <DIO_SetPinValue+0x72>
	{
		switch (Port)
 1ee:	84 31       	cpi	r24, 0x14	; 20
 1f0:	a1 f0       	breq	.+40     	; 0x21a <DIO_SetPinValue+0x30>
 1f2:	18 f4       	brcc	.+6      	; 0x1fa <DIO_SetPinValue+0x10>
 1f4:	8a 30       	cpi	r24, 0x0A	; 10
 1f6:	31 f0       	breq	.+12     	; 0x204 <DIO_SetPinValue+0x1a>
 1f8:	08 95       	ret
 1fa:	8e 31       	cpi	r24, 0x1E	; 30
 1fc:	c9 f0       	breq	.+50     	; 0x230 <DIO_SetPinValue+0x46>
 1fe:	88 32       	cpi	r24, 0x28	; 40
 200:	11 f1       	breq	.+68     	; 0x246 <DIO_SetPinValue+0x5c>
 202:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA , Pin);
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinValue+0x26>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinValue+0x22>
 214:	82 2b       	or	r24, r18
 216:	8b bb       	out	0x1b, r24	; 27
			break;
 218:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(PORTB , Pin);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPinValue+0x3c>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPinValue+0x38>
 22a:	82 2b       	or	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
			break;
 22e:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(PORTC , Pin);
 230:	25 b3       	in	r18, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPinValue+0x52>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPinValue+0x4e>
 240:	82 2b       	or	r24, r18
 242:	85 bb       	out	0x15, r24	; 21
			break;
 244:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(PORTD , Pin);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPinValue+0x68>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPinValue+0x64>
 256:	82 2b       	or	r24, r18
 258:	82 bb       	out	0x12, r24	; 18
			break;
 25a:	08 95       	ret
			
			default:
			break;
		}
	}
	else if(Value == DIO_PIN_LOW)
 25c:	41 11       	cpse	r20, r1
 25e:	3a c0       	rjmp	.+116    	; 0x2d4 <DIO_SetPinValue+0xea>
	{
		switch (Port)
 260:	84 31       	cpi	r24, 0x14	; 20
 262:	a9 f0       	breq	.+42     	; 0x28e <DIO_SetPinValue+0xa4>
 264:	18 f4       	brcc	.+6      	; 0x26c <DIO_SetPinValue+0x82>
 266:	8a 30       	cpi	r24, 0x0A	; 10
 268:	31 f0       	breq	.+12     	; 0x276 <DIO_SetPinValue+0x8c>
 26a:	08 95       	ret
 26c:	8e 31       	cpi	r24, 0x1E	; 30
 26e:	d9 f0       	breq	.+54     	; 0x2a6 <DIO_SetPinValue+0xbc>
 270:	88 32       	cpi	r24, 0x28	; 40
 272:	29 f1       	breq	.+74     	; 0x2be <DIO_SetPinValue+0xd4>
 274:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA , Pin);
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinValue+0x98>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinValue+0x94>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	8b bb       	out	0x1b, r24	; 27
			break;
 28c:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB , Pin);
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPinValue+0xb0>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPinValue+0xac>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	88 bb       	out	0x18, r24	; 24
			break;
 2a4:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC , Pin);
 2a6:	25 b3       	in	r18, 0x15	; 21
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_SetPinValue+0xc8>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_SetPinValue+0xc4>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	85 bb       	out	0x15, r24	; 21
			break;
 2bc:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD , Pin);
 2be:	22 b3       	in	r18, 0x12	; 18
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinValue+0xe0>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinValue+0xdc>
 2ce:	80 95       	com	r24
 2d0:	82 23       	and	r24, r18
 2d2:	82 bb       	out	0x12, r24	; 18
 2d4:	08 95       	ret

000002d6 <SET_GlobalInterrupt>:

void SET_GlobalInterrupt(void)
{
	#if GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
	
	SetBit(SREG,7);
 2d6:	8f b7       	in	r24, 0x3f	; 63
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8f bf       	out	0x3f, r24	; 63
 2dc:	08 95       	ret

000002de <ExternalINT0_Init>:
}

void ExternalINT0_Init(void)
{
	// Enable Global Interrupt //
	SET_GlobalInterrupt();
 2de:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <SET_GlobalInterrupt>
	
	// Enable External INT0 //
	SetBit(GICR,6); 
 2e2:	8b b7       	in	r24, 0x3b	; 59
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	8b bf       	out	0x3b, r24	; 59
	
	// Select External INT0 Trigger //
	#if EXTERNAL_INT0_TRIGGER == TRIGGER_RISSING
		MCUCR |= TRIGGER_RISSING;
 2e8:	85 b7       	in	r24, 0x35	; 53
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	85 bf       	out	0x35, r24	; 53
 2ee:	08 95       	ret

000002f0 <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand (uint8 cmd)
{
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
	
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	84 e1       	ldi	r24, 0x14	; 20
 2fa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	84 e1       	ldi	r24, 0x14	; 20
 30e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 312:	8b b3       	in	r24, 0x1b	; 27
 314:	9c 2f       	mov	r25, r28
 316:	90 7f       	andi	r25, 0xF0	; 240
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	89 2b       	or	r24, r25
 31c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	8f e9       	ldi	r24, 0x9F	; 159
 32a:	9f e0       	ldi	r25, 0x0F	; 15
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_WriteCommand+0x3c>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_WriteCommand+0x42>
 332:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	84 e1       	ldi	r24, 0x14	; 20
 33a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 33e:	20 e1       	ldi	r18, 0x10	; 16
 340:	c2 9f       	mul	r28, r18
 342:	c0 01       	movw	r24, r0
 344:	11 24       	eor	r1, r1
 346:	9b b3       	in	r25, 0x1b	; 27
 348:	9f 70       	andi	r25, 0x0F	; 15
 34a:	89 2b       	or	r24, r25
 34c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
 358:	8f e9       	ldi	r24, 0x9F	; 159
 35a:	9f e0       	ldi	r25, 0x0F	; 15
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_WriteCommand+0x6c>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_WriteCommand+0x72>
 362:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	84 e1       	ldi	r24, 0x14	; 20
 36a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
 36e:	8f e1       	ldi	r24, 0x1F	; 31
 370:	9e e4       	ldi	r25, 0x4E	; 78
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_WriteCommand+0x82>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_WriteCommand+0x88>
 378:	00 00       	nop
	DIO_SetPinValue(LCD_8BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
	
	_delay_ms(5);
	
	#endif
}
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <LCD_Init>:

void LCD_Init (void)
{
	#if LCD_MODE == 4
	
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN , DIO_PIN_OUTPUT);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	84 e1       	ldi	r24, 0x14	; 20
 384:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN , DIO_PIN_OUTPUT);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	84 e1       	ldi	r24, 0x14	; 20
 38e:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN , DIO_PIN_OUTPUT);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	84 e1       	ldi	r24, 0x14	; 20
 398:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D4_PIN , DIO_PIN_OUTPUT);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	64 e0       	ldi	r22, 0x04	; 4
 3a0:	8a e0       	ldi	r24, 0x0A	; 10
 3a2:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D5_PIN , DIO_PIN_OUTPUT);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D6_PIN , DIO_PIN_OUTPUT);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	66 e0       	ldi	r22, 0x06	; 6
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
 3b6:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D7_PIN , DIO_PIN_OUTPUT);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDir>
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	81 ee       	ldi	r24, 0xE1	; 225
 3c8:	94 e0       	ldi	r25, 0x04	; 4
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <LCD_Init+0x4c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_Init+0x56>
 3d4:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WriteCommand(0x33);
 3d6:	83 e3       	ldi	r24, 0x33	; 51
 3d8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 3dc:	82 e3       	ldi	r24, 0x32	; 50
 3de:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 3e2:	88 e2       	ldi	r24, 0x28	; 40
 3e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	
	LCD_WriteCommand(0x0C);
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
 400:	08 95       	ret

00000402 <LCD_WriteChar>:
	
	#endif
}

void LCD_WriteChar (uint8 data)
{
 402:	cf 93       	push	r28
 404:	c8 2f       	mov	r28, r24
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	84 e1       	ldi	r24, 0x14	; 20
 40c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	84 e1       	ldi	r24, 0x14	; 20
 416:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	63 e0       	ldi	r22, 0x03	; 3
 41e:	84 e1       	ldi	r24, 0x14	; 20
 420:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 424:	8b b3       	in	r24, 0x1b	; 27
 426:	9c 2f       	mov	r25, r28
 428:	90 7f       	andi	r25, 0xF0	; 240
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	89 2b       	or	r24, r25
 42e:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	63 e0       	ldi	r22, 0x03	; 3
 434:	84 e1       	ldi	r24, 0x14	; 20
 436:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
 43a:	8f e9       	ldi	r24, 0x9F	; 159
 43c:	9f e0       	ldi	r25, 0x0F	; 15
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <LCD_WriteChar+0x3c>
 442:	00 c0       	rjmp	.+0      	; 0x444 <LCD_WriteChar+0x42>
 444:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	84 e1       	ldi	r24, 0x14	; 20
 44c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 450:	20 e1       	ldi	r18, 0x10	; 16
 452:	c2 9f       	mul	r28, r18
 454:	c0 01       	movw	r24, r0
 456:	11 24       	eor	r1, r1
 458:	9b b3       	in	r25, 0x1b	; 27
 45a:	9f 70       	andi	r25, 0x0F	; 15
 45c:	89 2b       	or	r24, r25
 45e:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	63 e0       	ldi	r22, 0x03	; 3
 464:	84 e1       	ldi	r24, 0x14	; 20
 466:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
 46a:	8f e9       	ldi	r24, 0x9F	; 159
 46c:	9f e0       	ldi	r25, 0x0F	; 15
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_WriteChar+0x6c>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_WriteChar+0x72>
 474:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	63 e0       	ldi	r22, 0x03	; 3
 47a:	84 e1       	ldi	r24, 0x14	; 20
 47c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_SetPinValue>
 480:	8f e1       	ldi	r24, 0x1F	; 31
 482:	9e e4       	ldi	r25, 0x4E	; 78
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_WriteChar+0x82>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_WriteChar+0x88>
 48a:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
	
}
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <LCD_WriteInteger>:


/*  Assignment  */
void LCD_WriteInteger (sint32 num)
{
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	6b 01       	movw	r12, r22
 4a0:	7c 01       	movw	r14, r24
	sint32 temp_num;
	uint16 increment_temp_num = 0;
	sint8 counter = 0; // adjusting variable to be signed solve the last loop going infinite
	
	if (num < 0)
 4a2:	99 23       	and	r25, r25
 4a4:	5c f4       	brge	.+22     	; 0x4bc <LCD_WriteInteger+0x2c>
	{
		LCD_WriteChar('-');
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteChar>
		temp_num = num * -1;
 4ac:	f0 94       	com	r15
 4ae:	e0 94       	com	r14
 4b0:	d0 94       	com	r13
 4b2:	c0 94       	com	r12
 4b4:	c1 1c       	adc	r12, r1
 4b6:	d1 1c       	adc	r13, r1
 4b8:	e1 1c       	adc	r14, r1
 4ba:	f1 1c       	adc	r15, r1
	}
	else
		temp_num = num;
	
	if(temp_num == 0)
 4bc:	c1 14       	cp	r12, r1
 4be:	d1 04       	cpc	r13, r1
 4c0:	e1 04       	cpc	r14, r1
 4c2:	f1 04       	cpc	r15, r1
 4c4:	f9 f4       	brne	.+62     	; 0x504 <LCD_WriteInteger+0x74>
	{
		LCD_WriteChar('0');
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteChar>
 4cc:	53 c0       	rjmp	.+166    	; 0x574 <LCD_WriteInteger+0xe4>
	}
	else
	{
		while (temp_num > 0 && counter < 10)
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
 4ce:	be 01       	movw	r22, r28
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	cc 0f       	add	r28, r28
 4d6:	dd 1f       	adc	r29, r29
 4d8:	cc 0f       	add	r28, r28
 4da:	dd 1f       	adc	r29, r29
 4dc:	cc 0f       	add	r28, r28
 4de:	dd 1f       	adc	r29, r29
 4e0:	c6 0f       	add	r28, r22
 4e2:	d7 1f       	adc	r29, r23
 4e4:	c7 01       	movw	r24, r14
 4e6:	b6 01       	movw	r22, r12
 4e8:	2a e0       	ldi	r18, 0x0A	; 10
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodsi4>
 4f4:	c6 0f       	add	r28, r22
 4f6:	d7 1f       	adc	r29, r23
			temp_num /= 10;
 4f8:	c2 2e       	mov	r12, r18
 4fa:	d3 2e       	mov	r13, r19
 4fc:	e4 2e       	mov	r14, r20
 4fe:	f5 2e       	mov	r15, r21
			counter++;
 500:	1f 5f       	subi	r17, 0xFF	; 255
 502:	03 c0       	rjmp	.+6      	; 0x50a <LCD_WriteInteger+0x7a>
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_WriteChar('0');
	}
	else
	{
		while (temp_num > 0 && counter < 10)
 50a:	1c 14       	cp	r1, r12
 50c:	1d 04       	cpc	r1, r13
 50e:	1e 04       	cpc	r1, r14
 510:	1f 04       	cpc	r1, r15
 512:	14 f4       	brge	.+4      	; 0x518 <LCD_WriteInteger+0x88>
 514:	1a 30       	cpi	r17, 0x0A	; 10
 516:	dc f2       	brlt	.-74     	; 0x4ce <LCD_WriteInteger+0x3e>
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
 518:	11 50       	subi	r17, 0x01	; 1
		while(counter>=0)
 51a:	2a c0       	rjmp	.+84     	; 0x570 <LCD_WriteInteger+0xe0>
		{
			LCD_WriteChar('0' + (increment_temp_num % 10));
 51c:	9e 01       	movw	r18, r28
 51e:	ad ec       	ldi	r26, 0xCD	; 205
 520:	bc ec       	ldi	r27, 0xCC	; 204
 522:	0e 94 b5 03 	call	0x76a	; 0x76a <__umulhisi3>
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	9c 01       	movw	r18, r24
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	82 0f       	add	r24, r18
 546:	93 1f       	adc	r25, r19
 548:	9e 01       	movw	r18, r28
 54a:	28 1b       	sub	r18, r24
 54c:	39 0b       	sbc	r19, r25
 54e:	c9 01       	movw	r24, r18
 550:	80 5d       	subi	r24, 0xD0	; 208
 552:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteChar>
			increment_temp_num /= 10;
 556:	9e 01       	movw	r18, r28
 558:	ad ec       	ldi	r26, 0xCD	; 205
 55a:	bc ec       	ldi	r27, 0xCC	; 204
 55c:	0e 94 b5 03 	call	0x76a	; 0x76a <__umulhisi3>
 560:	ec 01       	movw	r28, r24
 562:	d6 95       	lsr	r29
 564:	c7 95       	ror	r28
 566:	d6 95       	lsr	r29
 568:	c7 95       	ror	r28
 56a:	d6 95       	lsr	r29
 56c:	c7 95       	ror	r28
			counter--;
 56e:	11 50       	subi	r17, 0x01	; 1
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
		while(counter>=0)
 570:	11 23       	and	r17, r17
 572:	a4 f6       	brge	.-88     	; 0x51c <LCD_WriteInteger+0x8c>
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	df 90       	pop	r13
 580:	cf 90       	pop	r12
 582:	08 95       	ret

00000584 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 58c:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 58e:	03 c0       	rjmp	.+6      	; 0x596 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 590:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteChar>
		Str_count++;
 594:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 596:	f8 01       	movw	r30, r16
 598:	ec 0f       	add	r30, r28
 59a:	f1 1d       	adc	r31, r1
 59c:	80 81       	ld	r24, Z
 59e:	81 11       	cpse	r24, r1
 5a0:	f7 cf       	rjmp	.-18     	; 0x590 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <LCD_GoToLocation+0x6>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {0x80,0xc0};
 5b4:	90 e8       	ldi	r25, 0x80	; 128
 5b6:	99 83       	std	Y+1, r25	; 0x01
 5b8:	90 ec       	ldi	r25, 0xC0	; 192
 5ba:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 5bc:	e1 e0       	ldi	r30, 0x01	; 1
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ec 0f       	add	r30, r28
 5c2:	fd 1f       	adc	r31, r29
 5c4:	e8 0f       	add	r30, r24
 5c6:	f1 1d       	adc	r31, r1
 5c8:	80 81       	ld	r24, Z
 5ca:	86 0f       	add	r24, r22
 5cc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
	
}
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(0x01);
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_WriteCommand>
 5e0:	08 95       	ret

000005e2 <main>:

uint16 Temp = 0;

int main(void)
{
	TempSensor_Init();
 5e2:	0e 94 93 03 	call	0x726	; 0x726 <TempSensor_Init>
	ExternalINT0_Init();
 5e6:	0e 94 6f 01 	call	0x2de	; 0x2de <ExternalINT0_Init>
	LCD_Init();
 5ea:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Init>
	
	LCD_GoToLocation(0,3);
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_GoToLocation>
	LCD_WriteString("WELCOME!");
 5f6:	80 e6       	ldi	r24, 0x60	; 96
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_WriteString>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	8e e9       	ldi	r24, 0x9E	; 158
 602:	94 e2       	ldi	r25, 0x24	; 36
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x22>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x2c>
 60e:	00 00       	nop
	_delay_ms(750);
	
	LCD_GoToLocation(0,0);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_GoToLocation>
	LCD_WriteString("Press Button 2");
 618:	89 e6       	ldi	r24, 0x69	; 105
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_WriteString>
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	8e e9       	ldi	r24, 0x9E	; 158
 624:	94 e2       	ldi	r25, 0x24	; 36
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <main+0x44>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0x4e>
 630:	00 00       	nop
	_delay_ms(750);
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_Clear();
 632:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_Clear>
		LCD_WriteString("Press Button 2");
 636:	89 e6       	ldi	r24, 0x69	; 105
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_WriteString>
 63e:	2f ef       	ldi	r18, 0xFF	; 255
 640:	8e e9       	ldi	r24, 0x9E	; 158
 642:	94 e2       	ldi	r25, 0x24	; 36
 644:	21 50       	subi	r18, 0x01	; 1
 646:	80 40       	sbci	r24, 0x00	; 0
 648:	90 40       	sbci	r25, 0x00	; 0
 64a:	e1 f7       	brne	.-8      	; 0x644 <main+0x62>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <main+0x6c>
 64e:	00 00       	nop
 650:	f0 cf       	rjmp	.-32     	; 0x632 <main+0x50>

00000652 <__vector_1>:
		_delay_ms(750);
    }
}

ISR(INT0_vect)
{
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	LCD_Clear();
 674:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_Clear>
	LCD_WriteString("Convert");
 678:	88 e7       	ldi	r24, 0x78	; 120
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_WriteString>
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	86 e7       	ldi	r24, 0x76	; 118
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <__vector_1+0x34>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <__vector_1+0x3e>
 690:	00 00       	nop
	_delay_ms(30);
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	bf 91       	pop	r27
 698:	af 91       	pop	r26
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	7f 91       	pop	r23
 6a0:	6f 91       	pop	r22
 6a2:	5f 91       	pop	r21
 6a4:	4f 91       	pop	r20
 6a6:	3f 91       	pop	r19
 6a8:	2f 91       	pop	r18
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
 6b0:	1f 90       	pop	r1
 6b2:	18 95       	reti

000006b4 <__vector_16>:

ISR(ADC_vect)
{
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	//TempSensor_Read(&Temp);
	ADC_INT_Read(&Temp);
 6d6:	80 e8       	ldi	r24, 0x80	; 128
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_INT_Read>
	LCD_Clear();
 6de:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_Clear>
	LCD_WriteInteger(Temp);
 6e2:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__data_end>
 6e6:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <__data_end+0x1>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteInteger>
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
 6f4:	89 e6       	ldi	r24, 0x69	; 105
 6f6:	98 e1       	ldi	r25, 0x18	; 24
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <__vector_16+0x44>
 700:	00 c0       	rjmp	.+0      	; 0x702 <__vector_16+0x4e>
 702:	00 00       	nop
	_delay_ms(500);
}
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	7f 91       	pop	r23
 712:	6f 91       	pop	r22
 714:	5f 91       	pop	r21
 716:	4f 91       	pop	r20
 718:	3f 91       	pop	r19
 71a:	2f 91       	pop	r18
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <TempSensor_Init>:
#include "Temp_Sensor.h"


void TempSensor_Init (void)
{
	ADC_Init();
 726:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 72a:	08 95       	ret

0000072c <__divmodsi4>:
 72c:	05 2e       	mov	r0, r21
 72e:	97 fb       	bst	r25, 7
 730:	1e f4       	brtc	.+6      	; 0x738 <__divmodsi4+0xc>
 732:	00 94       	com	r0
 734:	0e 94 ad 03 	call	0x75a	; 0x75a <__negsi2>
 738:	57 fd       	sbrc	r21, 7
 73a:	07 d0       	rcall	.+14     	; 0x74a <__divmodsi4_neg2>
 73c:	0e 94 c4 03 	call	0x788	; 0x788 <__udivmodsi4>
 740:	07 fc       	sbrc	r0, 7
 742:	03 d0       	rcall	.+6      	; 0x74a <__divmodsi4_neg2>
 744:	4e f4       	brtc	.+18     	; 0x758 <__divmodsi4_exit>
 746:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__negsi2>

0000074a <__divmodsi4_neg2>:
 74a:	50 95       	com	r21
 74c:	40 95       	com	r20
 74e:	30 95       	com	r19
 750:	21 95       	neg	r18
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	4f 4f       	sbci	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255

00000758 <__divmodsi4_exit>:
 758:	08 95       	ret

0000075a <__negsi2>:
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	08 95       	ret

0000076a <__umulhisi3>:
 76a:	a2 9f       	mul	r26, r18
 76c:	b0 01       	movw	r22, r0
 76e:	b3 9f       	mul	r27, r19
 770:	c0 01       	movw	r24, r0
 772:	a3 9f       	mul	r26, r19
 774:	70 0d       	add	r23, r0
 776:	81 1d       	adc	r24, r1
 778:	11 24       	eor	r1, r1
 77a:	91 1d       	adc	r25, r1
 77c:	b2 9f       	mul	r27, r18
 77e:	70 0d       	add	r23, r0
 780:	81 1d       	adc	r24, r1
 782:	11 24       	eor	r1, r1
 784:	91 1d       	adc	r25, r1
 786:	08 95       	ret

00000788 <__udivmodsi4>:
 788:	a1 e2       	ldi	r26, 0x21	; 33
 78a:	1a 2e       	mov	r1, r26
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	fd 01       	movw	r30, r26
 792:	0d c0       	rjmp	.+26     	; 0x7ae <__udivmodsi4_ep>

00000794 <__udivmodsi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	ee 1f       	adc	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	a2 17       	cp	r26, r18
 79e:	b3 07       	cpc	r27, r19
 7a0:	e4 07       	cpc	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__udivmodsi4_ep>
 7a6:	a2 1b       	sub	r26, r18
 7a8:	b3 0b       	sbc	r27, r19
 7aa:	e4 0b       	sbc	r30, r20
 7ac:	f5 0b       	sbc	r31, r21

000007ae <__udivmodsi4_ep>:
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	1a 94       	dec	r1
 7b8:	69 f7       	brne	.-38     	; 0x794 <__udivmodsi4_loop>
 7ba:	60 95       	com	r22
 7bc:	70 95       	com	r23
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	9b 01       	movw	r18, r22
 7c4:	ac 01       	movw	r20, r24
 7c6:	bd 01       	movw	r22, r26
 7c8:	cf 01       	movw	r24, r30
 7ca:	08 95       	ret

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
